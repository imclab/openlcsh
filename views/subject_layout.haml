!!! XML
= "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML+RDFa 1.0//EN\" \"http://www.w3.org/MarkUp/DTD/xhtml-rdfa-1.dtd\">"
%html{:xmlns=>"http://www.w3.org/1999/xhtml", :"xmlns:rdf"=>"http://www.w3.org/1999/02/22-rdf-syntax-ns#",
  :"xmlns:skos"=>"http://www.w3.org/2004/02/skos/core#", :"xmlns:wgs84"=>"http://www.w3.org/2003/01/geo/wgs84_pos#",
  :"xmlns:lcsh"=>"http://LCSubjects.org/vocab/1#", :"xmlns:dcterms"=>"http://purl.org/dc/terms/", :"xml:lang"=>"en-us"}
  %head{:profile=>"http://www.w3.org/2003/g/data-view"}
    %link{:rel=>"transformation", :href=>"http://ns.inria.fr/grddl/rdfa/2008/03/28/RDFa2RDFXML.xsl"}
    %link{:rel=>"alternate", :type=>"application/rdf+xml", :href=>@subject.uri.sub(/\#concept/,".rdf")}
    %link{:rel=>"alternate", :type=>"text/plain", :href=>@subject.uri.sub(/\#concept/,".txt")}  
    %link{:rel=>"alternate", :type=>"application/json", :href=>@subject.uri.sub(/\#concept/,".json")}      
    %title LCSubjects.org: #{@title}
    %meta{:"http-equiv"=>"content-type", :content=>"text/html; charset=utf-8"}
    %link{:rel=>"stylesheet", :href=>"/stylesheets/style.css", :type=>"text/css", :media=>"screen", :charset=>"utf-8"}

    - if @subject && @subject.wgs84 && @subject.wgs84["lat"] && @subject.wgs84["long"]
      %script{:src=>"http://www.openlayers.org/api/OpenLayers.js"}

      %script{:src=>"http://www.openstreetmap.org/openlayers/OpenStreetMap.js"}

      :javascript
          // Start position for the map (hardcoded here for simplicity,
          // but maybe you want to get from URL params)
          // (Though to get it from the URL it's simpler to use the Permalink and ArgParser controls)
          var lat=#{@subject.wgs84["lat"]};
          var lon=#{@subject.wgs84["long"]};
          var zoom=4;

          var map; //complex object of type OpenLayers.Map

          //Initialise the 'map' object
          function init() {

              map = new OpenLayers.Map ("map", {
                  controls:[
                      new OpenLayers.Control.Navigation(),
                      new OpenLayers.Control.PanZoomBar(),
                      new OpenLayers.Control.Attribution()],
                  maxExtent: new OpenLayers.Bounds(-20037508.34,-20037508.34,20037508.34,20037508.34),
                  maxResolution: 156543.0399,
                  numZoomLevels: 19,
                  units: 'm',
                  projection: new OpenLayers.Projection("EPSG:900913"),
                  displayProjection: new OpenLayers.Projection("EPSG:4326")
              } );

              // Define the map layer
              // Note that we use a predefined layer that will be
              // kept up to date with URL changes
              // Here we define just one layer, but providing a choice
              // of several layers is also quite simple
              // Other defined layers are OpenLayers.Layer.OSM.Mapnik, OpenLayers.Layer.OSM.Maplint and OpenLayers.Layer.OSM.CycleMap
              layerTilesAtHome = new OpenLayers.Layer.OSM.Osmarender("Osmarender");
              map.addLayer(layerTilesAtHome);

              if( ! map.getCenter() ){
                  var lonLat = new OpenLayers.LonLat(lon, lat).transform(new OpenLayers.Projection("EPSG:4326"), map.getProjectionObject());
                  map.setCenter (lonLat, zoom);
              }

            	layerMarkers = new OpenLayers.Layer.Markers("Markers");
        			map.addLayer(layerMarkers);

        			var size = new OpenLayers.Size(21,25);
        			var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
        			var icon = new OpenLayers.Icon('http://www.openstreetmap.org/openlayers/img/marker.png',size,offset);
        			layerMarkers.addMarker(new OpenLayers.Marker(lonLat,icon));
              
          }
  
  %body{:onLoad=>"init();"}
    #navMenuContainer
      %ul.navMenu
        %li
          %a{:href=>"/"} Home
        %li
          %a{:href=>"/search/"} Search
        %li
          %a{:href=>"http://api.talis.com/stores/lcsh-info/services/sparql"} SPARQL
    #altFormatContainer
      %ul.alternativeFormats
        - ['rdf','nt','json'].each do |type|
          %li
            %a{:href=>"/subjects/#{params["id"].sub(/\#concept/,"")}.#{type}"} #{type}        

    = yield
